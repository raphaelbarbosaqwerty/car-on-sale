// ignore_for_file: member-ordering, prefer-match-file-name
import 'dart:async';
import 'dart:math';

import 'package:http/http.dart';
import 'package:http/testing.dart' show MockClient;

/// In this [CosChallenge] class, [httpClient] is the only necessary component
/// for completing the challenge successfully. The other constants are not
/// mandatory.
/// * You can move this Dart file to another directory and/or rename this file
/// but it is requested that you avoid modifying any code in the file.
/// * You also can read, copy and use any code from this file to complete the
/// challenge (If you are working with data that is generated by the
/// [httpClient] provided in this class).
class CosChallenge {
  CosChallenge._();

  /// ? This is optional field.
  /// This constant is optional, but it can come in handy for headers
  /// in the request. For example:
  ///
  /// ```dart
  /// final headers = {CosChallenge.user: someUserId};
  /// ```
  static const user = 'user';

  /// ? This is optional field.
  /// Vehicle identification number (VIN) length is 17.
  /// Reference https://wikipedia.org/wiki/Vehicle_identification_number
  /// Also an optional constant, you can use it in additional task
  /// for validating input values on the fetch request page. For example:
  ///
  /// ```dart
  /// if (input.length == CosChallenge.vinLength) return isValid = true;
  /// ```
  static const vinLength = 17;

  /// ! This is the only mandatory field.
  /// Please use this client for all network operations within the task.
  /// It's a static immutable instance of the [BaseClient] from the http package
  /// Reference https://pub.dev/documentation/http/latest/http/BaseClient-class.html
  /// You can use any method (get, post, put, etc.) and any URL to receive a
  /// response.
  /// Here's a short summary of what you can expect and/or have to handle:

  /// * If the request headers are missing, the [httpClient] will throw a
  /// [ClientException] with the message 'Auth'. You have to provide any kind of
  /// unique and persistent user identification as the value of "user" key in
  /// the request headers.
  ///
  /// * Request can be timed out â€” the [httpClient] will throw a
  /// [TimeoutException] with the message 'Timed-out'.
  ///
  /// * If the response is successful, the [httpClient] will return a [Response]
  ///   object with the body (contains single object) and status code.
  ///
  /// * If the response containing multiple choices code, the [httpClient] will
  /// return a [Response] object with the body (contains list of objects) and
  /// status code.
  ///
  /// * If the response is an error, the [httpClient] will return a [Response]
  /// object with the body (contains single object) and status code.
  ///
  /// Note that the possible responses are generated in the runtime
  /// by a [httpClient], which randomly selects a response code and generates
  /// a corresponding body for the response in order to simulate a real network
  /// request.
  ///
  /// Example of usage:
  ///
  /// ```dart
  /// Future<void> foo() async {
  ///   // ...
  ///   final response = await CosChallenge.httpClient
  ///       .get(Uri.https('anyUrl'), headers: {CosChallenge.user: someUserId});
  ///   // ...
  /// }
  /// ```
  static final BaseClient httpClient = MockClient(
    (request) async {
      if (request.headers[user]?.isEmpty ?? true) throw ClientException('Auth');
      final length = _ResponseCode.values.length;
      final code = Random().nextInt(length + 1) + (length - 1);
      await Future<void>.delayed(const Duration(seconds: 1));
      if (code > length + 1) throw TimeoutException('Timed-out');
      final response = _ResponseCode.values.elementAt(code - (length - 1));
      final body = response.whenConst(
        success: response._success,
        multipleChoices: response._multipleChoices,
        error: response._error,
      );

      return Response(body, code * 100, request: request);
    },
  );
}

enum _ResponseCode {
  success,
  multipleChoices,
  error;

  const _ResponseCode();

  R whenConst<R>({
    required R success,
    required R multipleChoices,
    required R error,
  }) {
    switch (this) {
      case _ResponseCode.success:
        return success;
      case _ResponseCode.multipleChoices:
        return multipleChoices;
      case _ResponseCode.error:
        return error;
    }
  }

  String get _multipleChoices => '''
[
    {
        "make": "Toyota",
        "model": "GT 86 Basis",
        "containerName": "DE - Cp2 2.0 EU5, 2012 - 2015",
        "similarity": ${Random().nextInt(100)},
        "externalId": "DE001-018601450020001"
    },
    {
        "make": "Toyota",
        "model": "GT 86 Basis",
        "containerName": "DE - Cp2 2.0 EU6, (EURO 6), 2015 - 2017",
        "similarity": 50,
        "externalId": "DE002-018601450020001"
    },
    {
        "make": "Toyota",
        "model": "GT 86 Basis",
        "containerName": "DE - Cp2 2.0 EU6, Basis, 2017 - 2020",
        "similarity": 0,
        "externalId": "DE003-018601450020001"
    }
]''';

  String get _success => '''
{
      "id": ${Random().nextInt(1000000)},
      "feedback": "Please modify the price.",
      "valuatedAt": "2023-01-05T14:08:40.456Z",
      "requestedAt": "2023-01-05T14:08:40.456Z",
      "createdAt": "2023-01-05T14:08:40.456Z",
      "updatedAt": "2023-01-05T14:08:42.153Z",
      "make": "Toyota",
      "model": "GT 86 Basis",
      "externalId": "DE003-018601450020008"
      "_fk_sellerUser": "25475e37-6973-483b-9b15-cfee721fc29f",
      "price": ${Random().nextInt(1000)},
      "positiveCustomerFeedback": ${Random().nextBool()},
      "_fk_uuid_auction": "3e255ad2-36d4-4048-a962-5e84e27bfa6e",
      "inspectorRequestedAt": "2023-01-05T14:08:40.456Z",
      "origin": "AUCTION",
      "estimationRequestId": "3a295387d07f"
    }
''';

  String get _error {
    final delay = Random().nextInt(5) + 1;

    return '''
  {
  "msgKey": "maintenance",
  "params": { "delaySeconds": "$delay" },
  "message": "Please try again in $delay seconds"
  }
  ''';
  }
}

Future<void> main() async {
  final response = await CosChallenge.httpClient
      .get(Uri.https('anyUrl'), headers: {CosChallenge.user: 'someUserId'});
  print('Status code: ${response.statusCode} body:\n${response.body}');
}
